from dpi_set import *
from tkinter import *
from tkinter import ttk
import os, requests
from dotenv import load_dotenv
import re
import tkinter as tk
import tkinter.messagebox as tkk
import threading

load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY")

URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={API_KEY}"


#‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
root = tk.Tk()
root.title("Gemini AI Translator")

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
window_width = 950
window_height = 600
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
center_x = int(screen_width/2 - window_width/2)
center_y = int(screen_height/2 - window_height/2)

root.geometry(f"{window_width}x{window_height}+{center_x}+{center_y}")
root.maxsize(950,600)
root.minsize(950,600)



#‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DPI
dpi = DpiManager()
dpi.enable_win_dpi_awareness(mode="system")  # ‡∏´‡∏£‡∏∑‡∏≠ "permonitor"
dpi.apply_tk_scaling(root)   # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡πÄ‡∏Å‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏ï‡∏≤‡∏° DPI ‡∏à‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
dpi.bind_auto_update(root)   # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á/‡∏£‡∏µ‡πÑ‡∏ã‡∏™‡πå

# ...existing code...
language1 = StringVar(value="‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
language2 = StringVar(value="English")
#widget
# make combobox readonly so user cannot type arbitrary text
combo1 = ttk.Combobox(root, values=["‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥","Thai","English","Japanese","Chinese","Korean"], textvariable=language1, state="readonly")
combo1.pack(pady=10)
combo1.place(x=145,y=18)

label = Label(root, text="‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂", font=("Sarabun", 16))
label.place(x=400, y=1)

combo2 = ttk.Combobox(root, values=["Thai","English","Japanese","Chinese","Korean"], textvariable=language2, state="readonly")
combo2.pack(pady=10)
combo2.place(x=620,y=18)

#‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
text1 = Text(root,font=("Sarabun",16),height=7,width=25)
text1.place(x=10,y=65)

text2 = Text(root,font=("Sarabun",16),height=7,width=25)
text2.place(x=485,y=65)


def _clean_output(s: str) -> str:
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÜ"""
    if not s:
        return ""
    
    # ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà AI ‡∏ä‡∏≠‡∏ö‡πÉ‡∏™‡πà
    patterns_to_remove = [
        r'^\s*(that translates to|this translates to|translation|translated text|the translation is|in thai|in english|in japanese|in chinese|in korean)\s*:?\s*',
        r'^\s*(the most common.*?is|‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏£‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏Ñ‡πà|‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡∏∑‡∏≠)\s*:?\s*',
        r'^\s*(hello|‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ)\s+(in|‡πÉ‡∏ô)\s+\w+\s+(is|‡∏Ñ‡∏∑‡∏≠)\s*:?\s*',
        r'^\s*"([^"]*)".*$',  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏û‡∏π‡∏î ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô
    ]
    
    for pattern in patterns_to_remove:
        s = re.sub(pattern, r'\1' if '([^"]*)' in pattern else '', s, flags=re.I)
    
    # ‡∏•‡∏ö Markdown ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©
    s = re.sub(r'[*_`#]+', '', s)  # **bold**, *italic*, `code`, #header
    s = re.sub(r'^"+|"+$', '', s.strip())  # ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á
    s = re.sub(r'^\s*[-‚Ä¢]\s*', '', s)  # bullet points
    
    # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
    for line in s.splitlines():
        line = line.strip()
        if line and not line.startswith(('*', '-', '‚Ä¢', '#')):
            return line
    
    return s.strip()

def detect_language(text):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    thai_chars = sum(1 for c in text if '\u0e00' <= c <= '\u0e7f')
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏µ‡∏ô
    chinese_chars = sum(1 for c in text if '\u4e00' <= c <= '\u9fff')
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏©‡∏≤‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô
    japanese_chars = sum(1 for c in text if '\u3040' <= c <= '\u309f' or '\u30a0' <= c <= '\u30ff')
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ
    korean_chars = sum(1 for c in text if '\uac00' <= c <= '\ud7af')
    
    total_chars = len(text.replace(' ', ''))
    if total_chars == 0:
        return "English"
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    thai_percent = (thai_chars / total_chars) * 100
    chinese_percent = (chinese_chars / total_chars) * 100
    japanese_percent = (japanese_chars / total_chars) * 100
    korean_percent = (korean_chars / total_chars) * 100
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 30% ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if thai_percent > 30:
        return "Thai"
    elif chinese_percent > 30:
        return "Chinese"
    elif japanese_percent > 30:
        return "Japanese"
    elif korean_percent > 30:
        return "Korean"
    else:
        return "English"

def translate_api(src_text, src_lang, tgt_lang):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô thread)"""
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥" ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if src_lang == "‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥":
        src_lang = detect_language(src_text)
    
    # Prompt ‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÜ
    prompt = f"Translate this {src_lang} text to {tgt_lang}. Return only the translation, no explanations: {src_text}"
    
    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {
            "maxOutputTokens": 200,  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            "temperature": 0.1       # ‡∏•‡∏î randomness ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        }
    }

    try:
        r = requests.post(URL, json=payload, timeout=10)  # ‡∏•‡∏î timeout
        r.raise_for_status()
        data = r.json()
        
        translated_raw = data["candidates"][0]["content"]["parts"][0]["text"]
        return _clean_output(translated_raw)
    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"

def update_result(result):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô UI"""
    text2.delete("1.0","end")
    text2.insert("1.0", result)
    button1.config(state="normal", text="‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤")  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤

def translate():
    src_text = text1.get("1.0","end-1c").strip()
    src_lang = language1.get()
    tgt_lang = language2.get()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ "‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    if not src_text:
        text2.delete("1.0","end")
        text2.insert("1.0", "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô")
        return

    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•
    text2.delete("1.0","end")
    text2.insert("1.0", "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•...")
    button1.config(state="disabled", text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•...")  # ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    
    # ‡πÉ‡∏ä‡πâ threading ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ UI ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    def translate_thread():
        result = translate_api(src_text, src_lang, tgt_lang)
        root.after(0, lambda: update_result(result))  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏ô main thread
    
    thread = threading.Thread(target=translate_thread, daemon=True)
    thread.start()


def delete():
    text1.delete("1.0","end")
    text2.delete("1.0","end")

#‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
button1 = Button(root,text="‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤",font=("Sarabun",16),command=translate)
button1.place(x=305,y=490)

#‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
button2 = Button(root,text="‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",font=("Sarabun",16),command=delete)
button2.place(x=485,y=490)

root.mainloop()